"""
This file is part of The Discord Math Problem Bot Repo

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Author: Samuel Guo (64931063+rf20008@users.noreply.github.com)
"""

# THis program was partially generated by ChatGPT
import unittest
from unittest.mock import mock_open, patch

import pyfakefs

from helpful_modules.the_documentation_file_loader import (
    DocumentationFileLoader,
    DocumentationFileNotFound,
    DocumentationNotFound,
)


class TestDocumentationFileLoader(pyfakefs.fake_filesystem_unittest.TestCase):
    def setUp(self):
        super().setUp()
        self.setUpPyfakefs()

    # @patch(
    #    "builtins.open",
    #    new_callable=mock_open,
    #    read_data='{"file_name": "test.json", "contents": [{"title": "TestTitle", "contents": "TestContents"}]}',
    # )
    def test_load_documentation_into_readable_files(self):
        self.fs.create_dir("docs/")
        with open("docs/documentation.json", "w") as f:
            f.write(
                '{"file_name": "test.json", "contents": [{"title": "TestTitle", "contents": "TestContents"}]}'
            )

        loader = DocumentationFileLoader()
        documentation = loader.load_documentation_into_readable_files()

        # Ensure that the file is opened with the correct path

        # Check that the loaded documentation matches the expected structure
        self.assertIsInstance(documentation, dict)
        self.assertIn("contents", documentation.keys())
        self.assertIsInstance(documentation["contents"], list)
        print(documentation)
        self.assertEqual(
            documentation["contents"],
            [{"title": "TestTitle", "contents": "TestContents"}],
        )

    def test_get_documentation(self):
        """Basic tests for get_documentation"""

        loader = DocumentationFileLoader()
        self.fs.create_dir("docs/")
        with open("docs/documentation.json", "w") as f:
            f.write(
                '[{"file_name": "test.json", "contents": {"OWO": "OWO", "title": "TestTitle"}}]'
            )
        # Test successful retrieval
        documentation = loader.get_documentation("test.json", "TestTitle")
        self.assertEqual(documentation, {"OWO": "OWO", "title": "TestTitle"})

        # Test file not found
        with self.assertRaises(DocumentationFileNotFound):
            loader.get_documentation("nonexistent.json", "TestTitle")

        # Test item not found
        with self.assertRaises(DocumentationNotFound):
            loader.get_documentation("test.json", "NonexistentTitle")


if __name__ == "__main__":
    unittest.main()
