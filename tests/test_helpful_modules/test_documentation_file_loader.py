"""This is licensed under the GPLv3

Also, this was generated by ChatGPT"""
import unittest
from unittest.mock import mock_open, patch
import pyfakefs
from helpful_modules.the_documentation_file_loader import (
    DocumentationFileLoader,
    DocumentationFileNotFound,
    DocumentationNotFound,
)


class TestDocumentationFileLoader(pyfakefs.fake_filesystem_unittest.TestCase):
    def setUp(self):
        super().setUp()
        self.setUpPyfakefs()

    #@patch(
    #    "builtins.open",
    #    new_callable=mock_open,
    #    read_data='{"file_name": "test.json", "contents": [{"title": "TestTitle", "contents": "TestContents"}]}',
    #)
    def test_load_documentation_into_readable_files(self):
        self.fs.create_dir("docs/")
        with open("docs/documentation.json", "w") as f:
            f.write('{"file_name": "test.json", "contents": [{"title": "TestTitle", "contents": "TestContents"}]}')

        loader = DocumentationFileLoader()
        documentation = loader.load_documentation_into_readable_files()

        # Ensure that the file is opened with the correct path

        # Check that the loaded documentation matches the expected structure
        self.assertIsInstance(documentation, dict)
        self.assertIn("contents", documentation.keys())
        self.assertIsInstance(documentation["contents"], list)
        print(documentation)
        self.assertEqual(
            documentation["contents"],
            [{"title": "TestTitle", "contents": "TestContents"}]
        )


    def test_get_documentation(self):
        """Basic tests for get_documentation"""


        loader = DocumentationFileLoader()
        self.fs.create_dir("docs/")
        with open("docs/documentation.json", "w") as f:
            f.write('[{"file_name": "test.json", "contents": {"OWO": "OWO", "title": "TestTitle"}}]')
        # Test successful retrieval
        documentation = loader.get_documentation("test.json", "TestTitle")
        self.assertEqual(documentation, {"OWO": "OWO", "title": "TestTitle"})

        # Test file not found
        with self.assertRaises(DocumentationFileNotFound):
            loader.get_documentation("nonexistent.json", "TestTitle")

        # Test item not found
        with self.assertRaises(DocumentationNotFound):
            loader.get_documentation("test.json", "NonexistentTitle")


if __name__ == "__main__":
    unittest.main()
